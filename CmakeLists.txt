cmake_minimum_required(VERSION 3.15)

# 项目配置
project(mysql_connecter VERSION 0.1 LANGUAGES CXX)

# 编译配置
list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS "UI")
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

SET(CMAKE_C_COMPILER "D:/CppQt/Tools/mingw1120_64/bin/gcc.exe")
SET(CMAKE_CXX_COMPILER "D:/CppQt/Tools/mingw1120_64/bin/g++.exe")
SET(EXECUTABLE_OUTPUT_PATH "${PROJECT_SOURCE_DIR}/bin")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin")

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  message(STATUS "Set up ccache ...")
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif()

# qt_dir
SET(CMAKE_PREFIX_PATH "D:/CppQt/6.2.4/mingw_64/lib/cmake")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#add_definitions(-DQT_NO_DEBUG_OUTPUT)
SET(CMAKE_BUILD_TYPE "Debug") # Debug模式 选项: Release Debug MinSizeRel RelWithDebInfo
set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")

# 模块导入
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})   # 找不到生成的对应的ui_XXX.h头文件，可以尝试
# mysql模块
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Module/mysql/include)
file(GLOB_RECURSE sql_inc "${PROJECT_SOURCE_DIR}/Module/mysql/include/*.h")
file(GLOB_RECURSE sql_dll "${PROJECT_SOURCE_DIR}/Module/mysql/lib/*.dll")
file(GLOB sql_required 
    ${PROJECT_SOURCE_DIR}/Module/mysql/lib/libmysql.dll 
    ${PROJECT_SOURCE_DIR}/Module/mysql/lib/libssl-1_1-x64.dll 
    ${PROJECT_SOURCE_DIR}/Module/mysql/lib/libcrypto-1_1-x64.dll
)
# JSON
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/Module/nlohmann)


FILE(GLOB src_files "src/*.cpp")
FILE(GLOB UI_files "UI/*.ui")
FILE(GLOB INC "include/*.h")
FILE(GLOB HPP_INC "include/*.hpp")
FILE(GLOB res_files "res/*.qrc")

qt_add_resources(QRC_FILES ${res_files})

SOURCE_GROUP("UI FILES" FILES ${UI_files})
SOURCE_GROUP("INCLUDE FILES" FILES ${INC})
SOURCE_GROUP("SRC FILES" FILES ${src_files})
SOURCE_GROUP("Resource FILES" FILES ${res_files})

add_library(ui ${UI_files})

set(PROJECT_SOURCES
    ${src_files}
    ${INC}
    ${HPP_INC}
    ${QRC_FILES}
)

qt_add_executable(${PROJECT_NAME}
    ${PROJECT_SOURCES}
)

target_link_directories(${PROJECT_NAME} PRIVATE ${PROJECT_SOURCE_DIR}/Module/mysql/lib)
target_link_libraries(${PROJECT_NAME} PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)
target_link_libraries(${PROJECT_NAME} PRIVATE libmysql libssl-1_1-x64 libcrypto-1_1-x64) 

set_target_properties(${PROJECT_NAME} PROPERTIES
    MACOSX_BUNDLE_GUI_IDENTIFIER my.example.com
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

install(TARGETS ${PROJECT_NAME}
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)


# 复制必要文件
file(GLOB connections "${PROJECT_SOURCE_DIR}/connections/*")
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
            ${sql_required} "$<TARGET_FILE_DIR:${PROJECT_NAME}>"
        COMMAND ${CMAKE_COMMAND} -E make_directory 
            "$<TARGET_FILE_DIR:${PROJECT_NAME}>/connections"
        # COMMAND ${CMAKE_COMMAND} -E copy_if_different
        #     ${connections} "$<TARGET_FILE_DIR:${PROJECT_NAME}>/connections/"
)
